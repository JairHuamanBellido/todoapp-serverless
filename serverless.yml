service: todoapp

frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-2
  deploymentPrefix: todoapp
  deploymentBucket:
    name: ${file(./env/variables.js):bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:*
  httpApi:
    cors:
      allowedOrigins: '*'
      allowedHeaders: '*'
      allowedMethods:
        - GET 
        - POST
        - PUT
        - DELETE
      

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: todo
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getAllTask:
    name: GetAllTask-lambda-${sls:stage}
    handler: src/functions/getAllTasks.handler
    events:
      - httpApi:
          method: GET
          path: /tasks
  createTask:
    name: CreateTask-lambda-${sls:stage}
    handler: src/functions/createTask.handler
    events:
      - httpApi:
          method: POST
          path: /tasks
  updateTask:
    name: UpdateTask-lambda-${sls:stage}
    handler: src/functions/updateTask.handler
    events:
      - httpApi:
          method: PUT
          path: /tasks/{id}
  deleteTask:
    name: DeleteTask-lambda-${sls:stage}
    handler: src/functions/deleteTask.handler
    events:
      - httpApi:
          method: DELETE
          path: /tasks/{id}

plugins:
  - serverless-esbuild
  - serverless-offline
